{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0XAgBMA,EAFcC,IAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,YAEjBC,EAAOX,IAASW,OAEhBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,I,QCsCAe,MAlDf,YAAgD,IAAD,EAAxBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAAc,EACrBC,mBAAS,IADY,mBACtCC,EADsC,KAChCC,EADgC,OAEbF,mBAAS,IAFI,mBAEtCG,EAFsC,KAE5BC,EAF4B,KA+B7C,OA3BAC,qBAAU,WACJR,GACFhB,EAAGyB,WAAW,SACXC,IAAIV,GACJS,WAAW,YACXE,QAAQ,YAAa,QACrBC,YAAW,SAACC,GAAD,OACVN,EAAYM,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,gBAGhD,CAAChB,IAEJQ,qBAAU,WACRH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAaKjB,EAaN,yBAAKkB,QAxBY,WACjB,IAAMC,EAAWC,OAAO,mCAEpBD,GAEFrC,EAAGyB,WAAW,SAASc,IAAI,CACzBtB,KAAMoB,KAkBgBG,UAAU,eAClC,6CAbF,kBAAC,IAAD,CAAMC,GAAE,iBAAYzB,IAClB,yBAAKwB,UAAU,eACb,kBAACE,EAAA,EAAD,CACEC,IAAG,qDAAgDvB,EAAhD,UAEL,yBAAKoB,UAAU,oBACb,4BAAKvB,GACL,qCAAIK,EAAS,UAAb,aAAI,EAAasB,a,4EC5CdC,EAAeC,0BACfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAIQI,EAAgB,kBAAMC,qBAAWV,IC8D/BW,MAvDf,WAAoB,IAAD,EACSrC,mBAAS,IADlB,mBACVsC,EADU,KACHC,EADG,OAGYJ,IAHZ,mBAGPK,EAHO,KAGPA,KAgBV,OAnBiB,KAKjBnC,qBAAU,WACR,IAAMoC,EAAc5D,EAAGyB,WAAW,SAASG,YAAW,SAACC,GAAD,OACpD6B,EACE7B,EAASC,KAAKC,KAAI,SAACL,GAAD,MAAU,CAC1BV,GAAIU,EAAIV,GACRgB,KAAMN,EAAIM,eAIhB,OAAO,WACL4B,OAED,IAGD,yBAAKpB,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAACE,EAAA,EAAD,CAAQC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAME,WACnB,yBAAKrB,UAAU,uBACb,kBAACsB,EAAA,EAAD,KACE,kBAAC,IAAD,OAGF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAGF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAKN,yBAAKtB,UAAU,kBACb,yBAAKA,UAAU,2BACb,kBAAC,IAAD,MACA,2BAAOuB,YAAY,2BAA2BC,KAAK,WAIvD,yBAAKxB,UAAU,iBACb,kBAAC,EAAD,CAAatB,YAAU,IACtBuC,EAAM1B,KAAI,SAACkC,GAAD,OACT,kBAAC,EAAD,CAAaC,IAAKD,EAAKjD,GAAIA,GAAIiD,EAAKjD,GAAIC,KAAMgD,EAAKjC,KAAKf,a,kECuDnDkD,MA1Gf,WAAiB,IAAD,MACYhD,mBAAS,IADrB,mBACPiD,EADO,KACAC,EADA,OAEUlD,mBAAS,IAFnB,mBAEPC,EAFO,KAEDC,EAFC,KAGNiD,EAAWC,cAAXD,OAHM,EAIkBnD,mBAAS,IAJ3B,mBAIPkB,EAJO,KAIGmC,EAJH,OAKkBrD,mBAAS,IAL3B,mBAKPG,EALO,KAKGC,EALH,OAMe+B,IANf,mBAMLK,EANK,KAMLA,KAkCT,OAxCc,KAQdnC,qBAAU,WACJ8C,IACFtE,EAAGyB,WAAW,SACXC,IAAI4C,GACJ1C,YAAW,SAACC,GAAD,OAAc2C,EAAY3C,EAASG,OAAOf,SACxDjB,EAAGyB,WAAW,SACXC,IAAI4C,GACJ7C,WAAW,YACXE,QAAQ,YAAa,OACrBC,YAAW,SAACC,GAAD,OACVN,EAAYM,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,iBAGhD,CAACsC,IAEJ9C,qBAAU,WACRH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAgBD,yBAAKK,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACE,EAAA,EAAD,CACEC,IAAG,qDAAgDvB,EAAhD,UAEL,yBAAKoB,UAAU,mBACb,4BAAKH,GACL,wCACa,GACV,IAAIoC,KAAJ,UACCnD,EAASA,EAASoD,OAAS,UAD5B,iBACC,EAA+BC,iBADhC,aACC,EAA0CC,UAC1CC,gBAIN,yBAAKrC,UAAU,oBACb,kBAACsB,EAAA,EAAD,KACE,kBAAC,IAAD,OAGF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAGF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAKN,yBAAKtB,UAAU,aACZlB,EAASS,KAAI,SAACa,GAAD,aACZ,uBACEJ,UAAS,uBACPI,EAAQ3B,OAAS0C,EAAKmB,aAAe,kBAGvC,0BAAMtC,UAAU,aAAhB,IAA8BI,EAAQ3B,MACrC2B,EAAQA,QACT,0BAAMJ,UAAU,kBACb,IAAIiC,KAAJ,UAAS7B,EAAQ+B,iBAAjB,aAAS,EAAmBC,UAAUC,oBAM/C,yBAAKrC,UAAU,eACb,kBAAC,IAAD,MACA,8BACE,2BACEY,MAAOgB,EACPW,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,OAAO7B,QACnCW,YAAY,iBACZC,KAAK,SAEP,4BAAQ5B,QArEI,SAAC4C,GACnBA,EAAEE,iBACFC,QAAQC,IAAI,gBAAiBhB,GAE7BpE,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ7C,WAAW,YAAYc,IAAI,CAC5DK,QAASwB,EACTnD,KAAM0C,EAAKmB,YACXH,UAAW1E,IAASU,UAAU0E,WAAWC,oBAG3CjB,EAAS,KA2D2BL,KAAK,UAAnC,mBAIF,kBAAC,IAAD,S,gCCjHKuB,EACD,WAgBGvC,EAbC,SAACwC,EAAOC,GAEtB,OADAN,QAAQC,IAAIK,GACJA,EAAOzB,MACb,KAAKuB,EACH,OAAO,2BACFC,GADL,IAEE7B,KAAM8B,EAAO9B,OAEjB,QACE,OAAO6B,ICmBEE,MA7Bf,WAAiB,MAEUpC,IAFV,yCAEHqC,EAFG,KAcf,OACE,yBAAKnD,UAAU,SACb,yBAAKA,UAAU,mBACb,yBAAKG,IAAI,wDACTiD,IAAI,KACJ,yBAAKpD,UAAU,cACb,qDAGF,kBAACqD,EAAA,EAAD,CAAQzD,QApBC,WACbxB,EACGkF,gBAAgBjF,GAChBkF,MAAK,SAACC,GACHL,EAAS,CACL3B,KAAMuB,EACN5B,KAAMqC,EAAOrC,UAGpBsC,OAAM,SAACC,GAAD,OAAWC,MAAMD,EAAMtD,cAW5B,0BCcOwD,MA/Bf,WAAe,MAEgB9C,IAFhB,mBAEJK,EAFI,KAEJA,KACT,OAHa,KAKX,yBAAKnB,UAAU,OACXmB,EAGA,yBAAKnB,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAO6D,KAAK,kBACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGA,kBAAC,EAAD,MACF,kBAAC,IAAD,CAAOA,KAAK,KACZ,kBAAC,EAAD,UAdN,kBAAC,EAAD,QCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe5D,aJVS,CAC1BU,KAAM,MISuCX,QAASA,GAClD,kBAAC,EAAD,QAGJ8D,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMtD,c","file":"static/js/main.2ff45dcc.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7LcknRI-SIM_qvqhxs6Y3Y2JdOToyaA4\",\n  authDomain: \"whats-app-clone-599b6.firebaseapp.com\",\n  databaseURL: \"https://whats-app-clone-599b6.firebaseio.com\",\n  projectId: \"whats-app-clone-599b6\",\n  storageBucket: \"whats-app-clone-599b6.appspot.com\",\n  messagingSenderId: \"919997234439\",\n  appId: \"1:919997234439:web:fa32bf2b05c45bb963d9a2\",\n  measurementId: \"G-HEXR8HTPQN\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nconst auth = firebase.auth();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth , provider }; \nexport default db;\n","import React, { useEffect, useState } from \"react\";\n\n// Material UI core Imports\nimport { Avatar } from \"@material-ui/core\";\n\n// CSS Component Imports\nimport \"./SidebarChat.css\";\n\nimport db from \"./firebase\";\nimport { Link } from \"react-router-dom\";\n\nfunction SidebarChat({ id, name, addNewChat }) {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  useEffect(() => {\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timeStamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [id]);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for chat room\");\n\n    if (roomName) {\n      // database Stuff\n      db.collection(\"rooms\").add({\n        name: roomName,\n      });\n    }\n  };\n\n  return !addNewChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"SidebarChat\">\n        <Avatar\n          src={`https://avatars.dicebear.com/api/avataaars/${seed}.svg`}\n        />\n        <div className=\"SidebarChat_info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={createChat} className=\"SidebarChat\">\n      <h2>Add new chat</h2>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, {\n  createContext,\n  useContext,\n  useReducer,\n} from \"react\";\n\nexport const StateContext = createContext();\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect } from \"react\";\n\n// CSS Component Imports\nimport \"./Sidebar.css\";\n\n// Component Imports\nimport SidebarChat from \"./SidebarChat\";\n\n// Material UI Core Imports\nimport { Avatar, IconButton } from \"@material-ui/core\";\n\nimport db from \"./firebase\";\n\n// Material UI Icons Imports\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  // eslint-disable-next-line\n  const [ { user}, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar_header\">\n        <Avatar src={user?.photoURL}/>\n        <div className=\"sidebar_headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"sidebar_search\">\n        <div className=\"sidebar_searchContainer\">\n          <SearchOutlined />\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n\n      <div className=\"sidebar_chats\">\n        <SidebarChat addNewChat />\n        {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Avatar, IconButton } from \"@material-ui/core\";\n\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport AttachFile from \"@material-ui/icons/AttachFile\";\nimport MoreVert from \"@material-ui/icons/MoreVert\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\n\n// CSS Component Imports\nimport \"./Chat.css\";\nimport { useParams } from \"react-router-dom\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Chat() {\n  const [input, setInput] = useState(\"\");\n  const [seed, setSeed] = useState(\"\");\n  const { roomId } = useParams();\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [roomId]);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(\"you typed >>>\", input);\n\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n      message: input,\n      name: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat_header\">\n        <Avatar\n          src={`https://avatars.dicebear.com/api/avataaars/${seed}.svg`}\n        />\n        <div className=\"chat_headerInfo\">\n          <h3>{roomName}</h3>\n          <p>\n            last seen {\"\"}\n            {new Date(\n              messages[messages.length - 1]?.timestamp?.toDate()\n            ).toUTCString()}\n          </p>\n        </div>\n\n        <div className=\"chat_headerRight\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat_body\">\n        {messages.map((message) => (\n          <p\n            className={`chat_message ${\n              message.name === user.displayName && \"chat_receiver\"\n            }`}\n          >\n            <span className=\"chat_name\"> {message.name}</span>\n            {message.message}\n            <span className=\"chat_timeStamp\">\n              {new Date(message.timestamp?.toDate()).toUTCString()}\n            </span>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"chat_footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          ></input>\n          <button onClick={sendMessage} type=\"submit\">\n            Send a message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","export const initialState = {\n  user: null,\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport { actionTypes } from \"./reducer\";\nimport { useStateValue } from \"./StateProvider\"\n\nfunction Login() {\n// eslint-disable-next-line\n  const [ {}, dispatch ] = useStateValue();  \n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) =>{\n          dispatch({\n              type: actionTypes.SET_USER,\n              user: result.user,\n          })\n      } ) //console.log(result)\n      .catch((error) => alert(error.message));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login_container\">\n        <img src=\"http://pngimg.com/uploads/whatsapp/whatsapp_PNG12.png\" \n        alt=\"\"/>\n        <div className=\"login_text\">\n          <h1>Sign in to WhatsApp </h1>\n        </div>\n\n        <Button onClick={signIn}>Sign in with Google</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","// eslint-disable-next-line\nimport React, { useState } from \"react\";\n\n// CSS Component Imports\nimport \"./App.css\";\n\n// Component Imports\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  // eslint-disable-next-line\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    // BEM naming convention\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app_body\">\n          <Router>\n            <Switch>\n              {/* <Sidebar /> */}\n              {/* <Chat /> */}\n              <Route path=\"/rooms/:roomId\">\n                <Sidebar />\n                <Chat />\n              </Route>\n\n                <Sidebar />\n              <Route path=\"/\">\n              <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\"\nimport { StateProvider } from \"./StateProvider\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}